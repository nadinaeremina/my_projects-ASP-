using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.CodeAnalysis.Options;
using Microsoft.EntityFrameworkCore;
using MVC_AutoGeneratedCRUD.Model;
using Newtonsoft.Json.Linq;

namespace MVC_AutoGeneratedCRUD.Pages.Comments
{
    public class CreateModel : PageModel
    {
        private readonly MVC_AutoGeneratedCRUD.Model.ApplicationDbContext _context;

        public CreateModel(MVC_AutoGeneratedCRUD.Model.ApplicationDbContext context)
        {
            _context = context;
        }

        public async Task<IActionResult> OnGetAsync()
        {
            // 'Select' — это оператор, который принимает набор входных элементов
            // и выполняет проекцию на них для получения выходных данных,
            // содержащих такое же количество элементов.
            // Проекция определяется лямбда-выражением, переданным оператору выбора
            ClientsOptions = (await _context.Clients.ToListAsync())
                .Select(c => new SelectListItem() { Value = c.Id.ToString(), Text = c.Name })
                .ToList();
            return Page();
            // 'SelectListItem' — это класс из библиотеки System.Web.Mvc,
            // который представляет элемент выпадающего списка в ASP.NET MVC
            // 'Text' в объекте 'SelectListItem' — это отображаемый текст.
            // Обычно он отображается как внутренний HTML-код в элементе HTML <option>
            // 'Value' — это значение данного 'SelectListItem'.
            // Обычно оно отображается в HTML - элементе в виде value = "..." атрибута<option>
        }

        [BindProperty]
        public Comment Comment { get; set; } = default!;
        public List<SelectListItem> ClientsOptions { get; set; }
        // 'SelectListItem' - выпадающий список, кот позволяет нам выбрать нужную сущность

        //public List<Client> Clients { get; set; } = default!;

        // For more information, see https://aka.ms/RazorPagesCRUD.
        public async Task<IActionResult> OnPostAsync()
        {
            if (!ModelState.IsValid)
            {
                return Page();
            }

            _context.Comments.Add(Comment);
            await _context.SaveChangesAsync();

            return RedirectToPage("./Index");
        }
    }
}
